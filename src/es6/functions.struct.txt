IF: 'ƒ ()'
add: 'ƒ (...operands)'
and: 'ƒ (...operands)'
average: 'ƒ average(array)'
avg: 'ƒ average(array)'
between: '(haystack, from, to, tight) => {…}'
bigger: 'ƒ ()'
concatenate: 'ƒ (...operands)'
count: 'ƒ ()'
date: 'date => {…}'
day: 'ƒ (date)'
days: 'seconds => Math.floor(Math.abs(seconds) / 86400) || 0'
div: 'ƒ ()'
divide: 'ƒ ()'
ends: 'ƒ ends(haystack, needle)'
eq: 'ƒ (...operands)'
equal: 'ƒ (...operands)'
equality: 'ƒ (...operands)'
filename: 'url => {…}'
filter: 'ƒ (...operands)'
first: 'arr => arr && arr[0] || '''
from: '(haystack, needle) => _.between(haystack, needle)'
fromlast: '(haystack, needle) => _.between(haystack, needle, '', true)'
get: get(obj, property, meta = {}) { property = meta.property = val(property); const canonicalProperty = Mavo.getCanonicalProperty(obj, property); if (canonicalProperty !== undefined) { meta.property = canonicalProperty; var ret = obj[canonicalProperty]; if (typeof ret === 'function' && ret.name.indexOf('bound') !== 0) { return ret.bind(obj); } return ret; } if (Array.isArray(obj) && property && isNaN(property)) { // Array and non-numerical property const eqIndex = property.indexOf('='); if (eqIndex > -1) { // Property query meta.query = { propert: property.slice(0, eqIndex), valu: property.slice(eqIndex + 1) }; meta.property = []; ret = obj.f'ilter((e, i) => {…}'
gt: 'ƒ ()'
gte: 'ƒ (...operands)'
hour: 'ƒ (date)'
hours: 'seconds => Math.floor(Math.abs(seconds) / 3600) || 0'
idify: 'ƒ idify(readable)'
iff: 'ƒ ()'
intersects: intersects(arr1, arr2) { if (arr1 && arr2) { const set2 = new Set(arr2.map ? arr2.m'ap(val): arr2); arr1 = arr1.map ? arr1.map(val): [...arr1]; return !arr1.every(el => {…}'
join: 'ƒ join(array, glue)'
json: 'data => Mavo.safeToJSON(data)'
larger: 'ƒ ()'
last: 'arr => arr && arr[arr.length - 1] || '''
len: 'text => str(text).length'
localTimezone: 60
log: '(...args) => {…}'
lowercase: 'text => str(text).toLowerCase()'
lt: 'ƒ (...operands)'
lte: 'ƒ (...operands)'
max: 'ƒ max(array)'
min: 'ƒ min(array)'
minus: 'operand => {…}'
minute: 'ƒ (date)'
minutes: 'seconds => Math.floor(Math.abs(seconds) / 60) || 0'
mod: 'ƒ (...operands)'
month: 'ƒ (date)'
months: 'seconds => {…}'
ms: 'ƒ (date)'
mult: 'ƒ ()'
multiply: 'ƒ ()'
neq: 'ƒ (...operands)'
not: 'operand => {…}'
operators: {=: "eq"}
or: 'ƒ (...operands)'
ordinal: 'ƒ th(num)'
plus: 'operand => {…}'
product: 'ƒ ()'
readable: readable(identifier) { // Is it camelCase? return str(identifier) .re'place(/([a-z])([A-Z])(?=[a-z])/g, ($0, $1, $2) => {…}'
replace: replace(haystack, needle, replacement = '', iterations = 1) { if (Ar'ray.isArray(haystack)) { return haystack.map(item => {…}'
reverse: 'ƒ reverse(array)'
round: 'ƒ round(num, decimals)'
search: '(haystack, needle) => {…}'
second: 'ƒ (date)'
smaller: 'ƒ (...operands)'
starts: '(haystack, needle) => {…}'
subtract: 'ƒ ()'
sum: 'ƒ ()'
th: 'ƒ th(num)'
time: 'date => {…}'
to: '(haystack, needle) => _.between(haystack, '', needle)'
tofirst: '(haystack, needle) => _.between(haystack, '', needle, true)'
unique: 'ƒ unique(arr)'
uppercase: 'text => str(text).toUpperCase()'
url: '(id, url = location) => {…}'
util: {numbers: ƒ, fixDateString: ƒ, date: ƒ}
weekday: 'ƒ (date)'
weeks: 'seconds => Math.floor(Math.abs(seconds) / 604800) || 0'
year: 'ƒ (date)'
years: 'seconds => {…}'
_Trap: Proxy {operators: {…}, get: ƒ, url: ƒ, first: ƒ, last: ƒ, …}
